object Day2 extends App {

  import scala.io.Source

  val commands = Source.fromFile("../../../data/Day2.txt").getLines().toList
  //val commands = Source.fromFile("../../../data/Day2.example.txt").getLines().toList

  def distance (l: List[String], s: String) : Int =
      commands.filter{x => x.startsWith(s)}.map(x => Integer.parseInt(x.stripPrefix(s+" "))).sum

  println("answer1=" + distance(commands, "forward") * (distance(commands, "down") - distance(commands, "up")))

  def v (l: List[String], s: String) : List[Int] =
      commands.filter{x => x.startsWith(s)}.map(x => Integer.parseInt(x.stripPrefix(s+" ")))

  //val forward = commands.map(x => Integer.parseInt(x.stripPrefix("forward ")))

  val aim = commands.map{x =>
     if (x.startsWith("forward"))
        (Integer.parseInt(x.stripPrefix("forward ")), 0)
     else 
        (0, Integer.parseInt(
               if (x.startsWith("down"))
                  x.stripPrefix("down ")
               else
                  "-"+x.stripPrefix("up ")
            )
        )
  }
  println("aim=" + aim)
  val h = aim.map(_._1).sum
  println("h=" + h)
  val e = aim.map(_._2).scanLeft(0)(_ + _).tail
  println("e=" + e)
  val d = aim.map(_._1).zip(e).map{case (x, y) => x * y}.sum
  println("answer2=" + (d * h))
}
